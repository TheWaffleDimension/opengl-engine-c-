// vec2.cpp
//
// Copyright (C) 2018 - Mason Harris
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

#include <vec2.h>

namespace Core { namespace Math {
	Vec2::Vec2() {
		x = 0.0f;
		y = 0.0f;
	}

	Vec2::Vec2(const float& x, const float& y) {
		this->x = x;
		this->y = y;
	}

	Vec2& Vec2::add(const Vec2& other) {
		x += other.x;
		y += other.y;
		return *this;
	}

	Vec2& Vec2::subtract(const Vec2& other) {
		x -= other.x;
		y -= other.y;
		return *this;
	}

	Vec2& Vec2::multiply(const Vec2& other) {
		x *= other.x;
		y *= other.y;
		return *this;
	}

	Vec2& Vec2::divide(const Vec2& other) {
		x /= other.x;
		y /= other.y;
		return *this;
	}

	Vec2& operator+(Vec2 left, const Vec2& right) {
		return left.add(right);
	}

	Vec2& operator-(Vec2 left, const Vec2& right) {
		return left.subtract(right);
	}

	Vec2& operator*(Vec2 left, const Vec2& right) {
		return left.multiply(right);
	}

	Vec2& operator/(Vec2 left, const Vec2& right) {
		return left.divide(right);
	}

	Vec2& Vec2::operator+=(const Vec2& other) {
		return add(other);
	}

	Vec2& Vec2::operator-=(const Vec2& other) {
		return subtract(other);
	}

	Vec2& Vec2::operator*=(const Vec2& other) {
		return multiply(other);
	}

	Vec2& Vec2::operator/=(const Vec2& other) {
		return divide(other);
	}

	bool Vec2::operator==(const Vec2& other) {
		return x == other.x && y == other.y;
	}

	bool Vec2::operator!=(const Vec2& other) {
		return !(*this == other);
	}

	std::ostream& operator<<(std::ostream& stream, const Vec2& vector) {
		stream << "(" << vector.x << ", " << vector.y << ")";
		return stream;
	}
} }